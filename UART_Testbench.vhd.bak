library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use STD.textio.all;
use ieee.std_logic_textio.all;

entity UART_Testbench is --Up to 260MHz operation
generic (
	SEND_CLK_COUNTER_MAX : integer := 30
);
port(
	CLK_2 : out std_logic := '0'
);
end entity;

architecture arc of UART_Testbench is

signal CLK : std_logic := '1';

--SPI
signal ADC_SPI_send_data : std_logic_vector(16-1 downto 0) := (others => '0');
signal ADC_SPI_send_irq : std_logic := '0';
signal ADC_SPI_fifo_empty : std_logic := '0';
signal button_active : std_logic := '0';

signal adc_spi_test_counter : integer := 0;
signal ADC_SPI_SDIN : std_logic := 'Z';
signal ADC_SPI_SCLK : std_logic := 'Z';
signal ADC_SPI_CS :  std_logic := 'Z';

begin


CLK <= not CLK after 10ns; --50MHz 20ns
CLK_2 <= CLK;

--ADC_SPI_SDIN <= '1' after 31000ns;
process(CLK)
begin
	if rising_edge(CLK) then
		case adc_spi_test_counter is
			when 0=>
				ADC_SPI_send_irq <= '1';
				ADC_SPI_send_Data <= "0101010101010101";
			when 1 =>
				ADC_SPI_send_irq <= '1';
				ADC_SPI_send_Data <= "1111000000000000";
			when 2 => 
				ADC_SPI_send_irq <= '0';
			when 3 =>
				ADC_SPI_send_irq <= '0';
			when 4=> 
				ADC_SPI_send_irq <= '0';
			when others =>
				
		end case;
		adc_spi_test_counter <= adc_spi_test_counter + 1;
	end if;
end process;

end architecture;